/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import Controllers.ClienteController;
import Controllers.FuncionController;
import Controllers.ReservaCotroller;
import Modelos.Cliente;
import Modelos.Funcion;
import Modelos.Reserva;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author rocio
 */
public class ListaReservas extends javax.swing.JFrame {

    private ReservaCotroller controller = new ReservaCotroller();
    private ClienteController clienteController = new ClienteController();
    private FuncionController funcionController = new FuncionController();
    private DefaultListModel<Reserva> modeloLista = new DefaultListModel<>();

    /**
     * Creates new form ListaReservas
     */
    public ListaReservas() {
        initComponents();
        setTitle("Lista de Reservas");
        setLocationRelativeTo(null);
        jList1.setModel(modeloLista);
        cargarReservasDesdeBD();

    }

    private void cargarReservasDesdeBD() {
        modeloLista.clear();
        try {
            List<Reserva> reservas = controller.obtenerTodas();
            for (Reserva r : reservas) {
                modeloLista.addElement(r);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar reservas desde la base de datos.\n" + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        editar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        añadir = new javax.swing.JButton();
        salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jList1);

        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        añadir.setText("Añadir");
        añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editar)
                    .addComponent(eliminar)
                    .addComponent(añadir)
                    .addComponent(salir))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(editar)
                .addGap(18, 18, 18)
                .addComponent(eliminar)
                .addGap(26, 26, 26)
                .addComponent(añadir)
                .addGap(36, 36, 36)
                .addComponent(salir)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_salirActionPerformed

    private void añadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirActionPerformed
        // TODO add your handling code here:
       try {
        String datos = JOptionPane.showInputDialog(this,
                "Ingrese datos de reserva separados por comas:\n"
                + "id_funcion, id_cliente, num_asientos, fecha (YYYY-MM-DDTHH:MM:SS)");

        if (datos == null || datos.trim().isEmpty()) {
            return;
        }

        String[] partes = datos.split(",");
        if (partes.length != 4) {
            throw new IllegalArgumentException("Debe ingresar 4 datos separados por coma");
        }

        int idFuncion = Integer.parseInt(partes[0].trim());
        int idCliente = Integer.parseInt(partes[1].trim());
        int numAsientos = Integer.parseInt(partes[2].trim());
        LocalDateTime fecha = LocalDateTime.parse(partes[3].trim());

        Funcion funcion = funcionController.buscarFuncion(idFuncion);
        Cliente cliente = clienteController.buscarCliente(idCliente);

        if (funcion == null || cliente == null) {
            JOptionPane.showMessageDialog(this, "Funcion o Cliente no encontrados.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Reserva reserva = new Reserva();
        reserva.setFuncion(funcion);
        reserva.setCliente(cliente);
        reserva.setNum_asientos(numAsientos);
        reserva.setFecha_reserva(fecha);

        controller.crearReserva(reserva);
        cargarReservasDesdeBD();

    } catch (NumberFormatException | DateTimeParseException e) {
        JOptionPane.showMessageDialog(this, "Formato de datos incorrecto: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al crear reserva: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_añadirActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here
        int index = jList1.getSelectedIndex();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una reserva para eliminar.");
            return;
        }
        Reserva reserva = modeloLista.getElementAt(index);

        int confirm = JOptionPane.showConfirmDialog(this,
                "¿Está seguro de eliminar la reserva seleccionada?",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                controller.eliminarReserva(reserva.getId_reserva());
                cargarReservasDesdeBD();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar reserva: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_eliminarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        // TODO add your handling code here:
        int index = jList1.getSelectedIndex();
    if (index == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione una reserva para editar.");
        return;
    }
    Reserva reserva = modeloLista.getElementAt(index);
    try {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        String datosActuales = reserva.getFuncion().getId_funcion() + ", "
                + reserva.getCliente().getIdCliente() + ", "
                + reserva.getNum_asientos() + ", "
                + reserva.getFecha_reserva().format(formatter);

        String datosNuevos = JOptionPane.showInputDialog(this,
                "Editar datos (id_funcion, id_cliente, num_asientos, fecha y hora (yyyy-MM-dd HH:mm)):",
                datosActuales);

        if (datosNuevos == null || datosNuevos.trim().isEmpty()) {
            return;
        }

        String[] partes = datosNuevos.split(",");
        if (partes.length != 4) {
            throw new IllegalArgumentException("Debe ingresar 4 datos separados por coma");
        }

        int idFuncion = Integer.parseInt(partes[0].trim());
        int idCliente = Integer.parseInt(partes[1].trim());
        int numAsientos = Integer.parseInt(partes[2].trim());
        LocalDateTime fechaHora = LocalDateTime.parse(partes[3].trim(), formatter);

        Funcion funcion = funcionController.buscarFuncion(idFuncion);
        Cliente cliente = clienteController.buscarCliente(idCliente);
        if (funcion == null || cliente == null) {
            JOptionPane.showMessageDialog(this, "Funcion o Cliente no encontrados.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        reserva.setFuncion(funcion);
        reserva.setCliente(cliente);
        reserva.setNum_asientos(numAsientos);
        reserva.setFecha_reserva(fechaHora);
        controller.actualizarReserva(reserva);
        cargarReservasDesdeBD();

    } catch (NumberFormatException | DateTimeParseException e) {
        JOptionPane.showMessageDialog(this, "Formato de datos incorrecto: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar reserva: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_editarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaReservas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton añadir;
    private javax.swing.JButton editar;
    private javax.swing.JButton eliminar;
    private javax.swing.JList<Reserva> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables
}
